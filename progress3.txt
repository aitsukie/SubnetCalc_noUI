#include <iostream>
#include <vector>
#include <algorithm> // for find
#include <tuple> //Returning multiple variables
using namespace std;

//classes and functions here

tuple <int,int> check(vector<int> &v, int &IP_octet, int &sid, int &num)
{
    //int NID = 0; //Initializing the network ID to 0
    //int nextNet = 0; //Initializing the Next network to 0

    if (find(v.begin(), v.end(), IP_octet) != v.end()) //checking if the octet in the IP is in the subnets vector.
    {//If yes, then the IP octet is the NID itself

        num = IP_octet; //setting the NID octet to be equal to the octet in the IP
        return make_tuple(IP_octet, sid); //Returning the NID and the Next network octet

    }
    else 
    {
        if (v.size() > 1) //Checking if the size of the vector is more than 1.
        {
            num = v.rbegin()[1]; //Setting the NID octet to be equal to that of the second last element in the vector
            return make_tuple(num, sid); //Returning the NID octet and the Next Network octet
        }

    }

}

vector<int> calc(int &sid, int &g, int &f) //Returns a vector based on the current octet, groupsize and IP octet provided.
{    
    vector<int> nets; //Vector to hold the octets - Network ID and Next Network

    int i = 0; //Index to keep track

    while(sid <= f) //Run while the current octet is less than or equal to the octet in the IP
    {
        i++; //Increment by 1
        sid = g * i; // Multiply the group size by the index to get the new current octet
        nets.push_back(sid); //Put the result into the vector
    }

    return nets; //Return the vectors
    
}



void Functions(int &grp_size, int &IP_octet, vector<int> &subnets, int &NID, int &nextNet)
{
    int curr_subID = 0; //Initializing the current octet to 0

    subnets = calc(curr_subID, grp_size, IP_octet); //Subnet Vector to hold the vector returned by CALC.
    tuple<int, int> result = check(subnets, IP_octet,curr_subID,NID);

    NID = get<0>(result);
    nextNet = get<1>(result);

    //NID, nextNet = check(subnets, IP_octet, curr_subID, NID); //Running check function on the Network ID
    //nextNet = check(subnets, IP_octet, curr_subID, NID); //Running check function on the Next Network
    

    //int NetworkID = 0;
    int broadcast = nextNet - 1;
    int firstHost = NID + 1;
    int lastHost = broadcast - 1;
    //int NextNetwork = 0;

    cout << endl;
    cout << "Network ID: " << NID << endl;
    cout << "Broadcast IP: " << broadcast << endl;
    cout << "First Host IP: " << firstHost << endl;
    cout << "Last Host IP: " << lastHost << endl;
    cout << "Next Network ID: " << nextNet << endl;
}

void cases(int &cidr, int &IP_octet, int one, int two, int four, int eight, int sixteen, int thirty_two, int sixty_four, int hundred_twenty_eight)
{
    vector<int> subnets; //each subnet ID 
    int grp_size = 0; //Initializing group size to 0
    int NID = 0; //Initializing Network ID to 0
    int nextNet = 0; //Initializing Next Network to 0

    if (cidr == one) 
    {
        grp_size = 1;
    }
    else if (cidr == two) 
    {
        grp_size = 2;
    }
    else if (cidr == four) 
    {
        grp_size = 4;
    }
    else if (cidr == eight) 
    {
        grp_size = 8;
    }
    else if (cidr == sixteen) 
    {
        grp_size = 16;
    }
    else if (cidr == thirty_two) 
    {
        grp_size = 32;
    }
    else if (cidr == sixty_four) 
    {
        grp_size = 64;
    }
    else if (cidr == hundred_twenty_eight) 
    {
        grp_size = 128;
    }
    else {
        cout << "Invalid case" << endl;
    }

    Functions(grp_size, IP_octet, subnets, NID, nextNet);


}




int main()
{
  //cout << "Please input IP: 1.2.3.4:\n";
  //Fourh octet
  /*  int frst = 10;
    int scnd = 1;
    int thrd = 1;
    int frth = 37;
    int cidr = 29;*/

   /* int frst = 10;
    int scnd = 2;
    int thrd = 2;
    int frth = 20;
    int cidr = 30;*/

    /*int frst = 10;
    int scnd = 2;
    int thrd = 2;
    int frth = 199;
    int cidr = 26;*/
    
    //Third octet
    int frst = 10;
    int scnd = 4;
    int thrd = 77;
    int frth = 188;
    int cidr = 19;




    if (cidr >= 25 && cidr <= 32)
    {
        //Cases takes the cidr, the respective octet, and all the cidr variants for that octet.
        cases(cidr,frth,32,31,30,29,28,27,26,25); //Fourth octet
    }
    else if(cidr >= 17 && cidr <=24)
    {
        cases(cidr, thrd, 24,23,22,21,20,19,18,17); //Third octet
    }
    return 0;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu
